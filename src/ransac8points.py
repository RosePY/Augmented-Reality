# -*- coding: utf-8 -*-
"""ransac8points.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i_dtL32fPcrA0m5GZBk0GS-hTKxYuFO5
"""

import random
from numpy import array
from scipy.linalg import svd
from numpy.linalg import eig


def GetHomographyMatrix(x1,x2):
  A=[]
  for i in range(len(x1[:,0])):
    A+=[[x1[i,0],x1[i,1],1, 0,0,0,-x2[i,0]*x1[i,0],-x2[i,0]*x1[i,1],-x2[i,0]],
        [0,0,0,x1[i,0],x1[i,1],1,-x2[i,1]*x1[i,0],-x2[i,1]*x1[i,1],-x2[i,1]]]

  A=np.array(A)
  AT=A.T 
  ATxA=np.matmul(AT,A)
  # calculate eigendecomposition
  Hvalues, Hvectors = eig(ATxA)
  mineig = np.where(Hvalues == np.min(Hvalues))[0]
  H=Hvectors[mineig[0]-1,:]
  return H.reshape(3,3)


def GetFundamentalMatrix(x1,x2):
  A=[]
  for i in range(len(x1[:,0])):
    A+=[[x1[i,0]*x2[i,0],x1[i,0]*x2[i,1],x1[i,0],x1[i,1]*x2[i,0],x1[i,1]*x2[i,1],x1[i,1],x2[i,0],x2[i,1],1]]

  A=np.array(A)
  U, S, VT = svd(A)
  # U, S, VT = np.linalg.svd(A, full_matrices=False, compute_uv=True)
  f=VT[:,8]
  u,s,vt=svd(F)

  d[2]=0
  FM=np.matmul(np.matmul(u,np.diag(d)),vt.T)

  return FM



def Ransac8points(Soursepoints,DestinationPoints):
  #lista=list(range(len(vx)))
  MaxInliner=0
  S=[]
  for k in range(50):
    ListaPoints=list(range(NumPoints))
    Points8=random.sample(ListaPoints,k=8)
    X1,X2=Soursepoints[Points8,:], DestinationPoints[Points8,:]
    FM=GetFundamentalMatrix(X1,X2)  
    u,v=Soursepoints[ListaPoints,:], DestinationPoints[ListaPoints,:]  
    NumInliner=0
    for r in range(NumPoints):
      vr1=np.append(v[r,:],1)
      ur1=np.append(v[r,:], 1)
      #chekear
      err=abs(np.matmul(np.matmul(vr1,FM),ur1.T))/np.linalg.norm(np.matmul(FM[0:1,:],ur1.T))

      if err<1:
        NumInliner=NumInliner+1


    if MaxInliner<NumInliner:
      MaxInliner=NumInliner
      #F=FM
  return FM